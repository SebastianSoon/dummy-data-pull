openapi: 3.0.3
info:
  title: DSA Demo API
  version: 1.0.0
  description: |
    API for retrieving swim school data, including branches, users, students, levels, skills, classes, sessions, enrollments, assessments, and attendance.
servers:
  - url: https://dsa-demo.onrender.com
paths:
  /branches:
    get:
      operationId: listBranches
      summary: Get all branches
      description: |
        Returns a list of all branches.
        - No parameters required.
        - Response: Array of branch objects.
        - Example: `[ { id: "b1", name: "Main Branch", ... }, ... ]`
      tags: [Branches]
      responses:
        '200':
          description: List of branches
  /branches/{id}:
    get:
      operationId: getBranchById
      summary: Get branch by ID
      description: |
        Returns a single branch by its ID.
        - Path parameter: `id` (string, required)
        - Response: Branch object if found, 404 if not found.
        - Example: `/branches/b1`
      tags: [Branches]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Branch details
        '404':
          description: Not found
  /users:
    get:
      operationId: listUsers
      summary: Get all users (staff)
      description: |
        Returns a list of all users (staff).
        - Optional query parameters:
          - `role` (string): Filter by user role.
          - `branchId` (string): Filter by branch.
        - Response: Array of user objects.
        - Example: `/users?role=coach&branchId=b1`
      tags: [Users]
      parameters:
        - in: query
          name: role
          schema: { type: string }
        - in: query
          name: branchId
          schema: { type: string }
      responses:
        '200':
          description: List of users
  /users/{id}:
    get:
      operationId: getUserById
      summary: Get user by ID
      description: |
        Returns a single user by their ID.
        - Path parameter: `id` (string, required)
        - Response: User object if found, 404 if not found.
        - Example: `/users/u1`
      tags: [Users]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: User details
        '404':
          description: Not found
  /students:
    get:
      operationId: listStudents
      summary: Get all students
      description: |
        Returns a list of all students.
        - Optional query parameters:
          - `levelId` (string): Filter by level.
          - `branchId` (string): Filter by branch.
          - `status` (string): Filter by student status (TRIAL, NORMAL, ONHOLD, TERMINATED).
        - Response: Array of student objects.
        - Example: `/students?levelId=l1&status=NORMAL`
      tags: [Students]
      parameters:
        - in: query
          name: levelId
          schema: { type: string }
        - in: query
          name: branchId
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string }
      responses:
        '200':
          description: List of students
  /students/{id}:
    get:
      operationId: getStudentById
      summary: Get student by ID
      description: |
        Returns a single student by their ID.
        - Path parameter: `id` (string, required)
        - Response: Student object if found, 404 if not found.
        - Example: `/students/s1`
      tags: [Students]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Student details
        '404':
          description: Not found
  /students/{id}/enrollments:
    get:
      operationId: listStudentEnrollments
      summary: Get all enrollments for a student
      description: |
        Returns all enrollments for a given student.
        - Path parameter: `id` (student ID, string, required)
        - Response: Array of enrollment objects.
        - Example: `/students/s1/enrollments`
      tags: [Students, Enrollments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of enrollments
  /students/{id}/assessments:
    get:
      operationId: listStudentAssessments
      summary: Get all assessments for a student
      description: |
        Returns all assessments for a given student.
        - Path parameter: `id` (student ID, string, required)
        - Response: Array of assessment objects.
        - Example: `/students/s1/assessments`
      tags: [Students, Assessments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of assessments
  /students/{id}/attendances:
    get:
      operationId: listStudentAttendances
      summary: Get all attendance records for a student
      description: |
        Returns all attendance records for a given student.
        - Path parameter: `id` (student ID, string, required)
        - Response: Array of attendance objects.
        - Example: `/students/s1/attendances`
      tags: [Students, Attendance]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of attendance records
  /levels:
    get:
      operationId: listLevels
      summary: Get all levels
      description: |
        Returns a list of all levels.
        - No parameters required.
        - Response: Array of level objects.
        - Example: `[ { id: "l1", name: "Beginner", ... }, ... ]`
      tags: [Levels]
      responses:
        '200':
          description: List of levels
  /levels/{id}:
    get:
      operationId: getLevelById
      summary: Get level by ID
      description: |
        Returns a single level by its ID.
        - Path parameter: `id` (string, required)
        - Response: Level object if found, 404 if not found.
        - Example: `/levels/l1`
      tags: [Levels]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Level details
        '404':
          description: Not found
  /levels/{id}/skills:
    get:
      operationId: listLevelSkills
      summary: Get all skills for a level
      description: |
        This endpoint requires the level ID as a path parameter (e.g. `/levels/l4/skills`).
        Do not use a query parameter like `levelId`. For filtering by level using a query parameter, use `/skills?levelId=...` instead.
        - Path parameter: `id` (level ID, string, required)
        - Response: Array of skill objects.
        - Example: `/levels/l1/skills`
      tags: [Levels, Skills]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of skills
  /skills:
    get:
      operationId: listSkills
      summary: Get all skills
      description: |
        Returns a list of all skills, optionally filtered by level.
        - Optional query parameter: `levelId` (string)
        - Response: Array of skill objects.
        - Example: `/skills?levelId=l1`
      tags: [Skills]
      parameters:
        - in: query
          name: levelId
          schema: { type: string }
      responses:
        '200':
          description: List of skills
  /class-types:
    get:
      operationId: listClassTypes
      summary: Get all class types
      description: |
        Returns a list of all class types.
        - No parameters required.
        - Response: Array of class type objects.
        - Example: `[ { id: "ct1", name: "Group", ... }, ... ]`
      tags: [Class Types]
      responses:
        '200':
          description: List of class types
  /class-types/{id}:
    get:
      operationId: getClassTypeById
      summary: Get class type by ID
      description: |
        Returns a single class type by its ID.
        - Path parameter: `id` (string, required)
        - Response: Class type object if found, 404 if not found.
        - Example: `/class-types/ct1`
      tags: [Class Types]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Class type details
        '404':
          description: Not found
  /swim-classes:
    get:
      operationId: listSwimClasses
      summary: Get all swim classes
      description: |
        Returns a list of all swim classes.
        - Optional query parameters:
          - `branchId` (string): Filter by branch.
          - `classTypeId` (string): Filter by class type.
          - `levelId` (string): Filter by level (matches allowedLevels in class type).
        - Response: Array of swim class objects.
        - Example: `/swim-classes?branchId=b1&levelId=l1`
      tags: [Swim Classes]
      parameters:
        - in: query
          name: branchId
          schema: { type: string }
        - in: query
          name: classTypeId
          schema: { type: string }
        - in: query
          name: levelId
          schema: { type: string }
      responses:
        '200':
          description: List of swim classes
  /swim-classes/{id}:
    get:
      operationId: getSwimClassById
      summary: Get swim class by ID
      description: |
        Returns a single swim class by its ID.
        - Path parameter: `id` (string, required)
        - Response: Swim class object if found, 404 if not found.
        - Example: `/swim-classes/c1`
      tags: [Swim Classes]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Swim class details
        '404':
          description: Not found
  /swim-classes/{id}/sessions:
    get:
      operationId: listSwimClassSessions
      summary: Get all sessions for a swim class
      description: |
        Returns all sessions for a given swim class.
        - Path parameter: `id` (swim class ID, string, required)
        - Response: Array of session objects.
        - Example: `/swim-classes/c1/sessions`
      tags: [Swim Classes, Sessions]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of sessions
  /swim-class-sessions:
    get:
      operationId: listSwimClassSessionsAll
      summary: Get all swim class sessions
      description: |
        Returns a list of all swim class sessions.
        - Optional query parameters:
          - `swimClassId` (string): Filter by swim class.
          - `dateFrom` (string, date): Filter sessions on or after this date.
          - `dateTo` (string, date): Filter sessions on or before this date.
        - Response: Array of session objects, each with a `studentIds` array.
        - Example: `/swim-class-sessions?swimClassId=c1&dateFrom=2024-01-01`
      tags: [Sessions]
      parameters:
        - in: query
          name: swimClassId
          schema: { type: string }
        - in: query
          name: dateFrom
          schema: { type: string, format: date }
        - in: query
          name: dateTo
          schema: { type: string, format: date }
      responses:
        '200':
          description: List of swim class sessions
  /swim-class-sessions/{id}:
    get:
      operationId: getSwimClassSessionById
      summary: Get swim class session by ID
      description: |
        Returns a single swim class session by its ID.
        - Path parameter: `id` (string, required)
        - Response: Session object if found, 404 if not found. Includes a `studentIds` array.
        - Example: `/swim-class-sessions/s1`
      tags: [Sessions]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Swim class session details
        '404':
          description: Not found
  /swim-class-sessions/{id}/attendances:
    get:
      operationId: listSessionAttendances
      summary: Get all attendance records for a session
      description: |
        Returns all attendance records for a given swim class session.
        - Path parameter: `id` (session ID, string, required)
        - Response: Array of attendance objects.
        - Example: `/swim-class-sessions/s1/attendances`
      tags: [Sessions, Attendance]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of attendance records
  /enrollments:
    get:
      operationId: listEnrollments
      summary: Get all enrollments
      description: |
        Returns a list of all enrollments.
        - Optional query parameters:
          - `studentId` (string): Filter by student.
          - `classId` (string): Filter by swim class.
          - `active` (boolean): Filter for active enrollments (no endAt and not deleted).
        - Response: Array of enrollment objects.
        - Example: `/enrollments?studentId=s1&active=true`
      tags: [Enrollments]
      parameters:
        - in: query
          name: studentId
          schema: { type: string }
        - in: query
          name: classId
          schema: { type: string }
        - in: query
          name: active
          schema: { type: boolean }
      responses:
        '200':
          description: List of enrollments
  /enrollments/{id}:
    get:
      operationId: getEnrollmentById
      summary: Get enrollment by ID
      description: |
        Returns a single enrollment by its ID.
        - Path parameter: `id` (string, required)
        - Response: Enrollment object if found, 404 if not found.
        - Example: `/enrollments/e1`
      tags: [Enrollments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Enrollment details
        '404':
          description: Not found
  /assessments:
    get:
      operationId: listAssessments
      summary: Get all assessments
      description: |
        Returns a list of all assessments.
        - Optional query parameters:
          - `studentId` (string): Filter by student.
          - `levelId` (string): Filter by level.
          - `status` (string): Filter by assessment status (Scheduled, Submitted, Passed, Failed).
        - Response: Array of assessment objects.
        - Example: `/assessments?studentId=s1&status=Passed`
      tags: [Assessments]
      parameters:
        - in: query
          name: studentId
          schema: { type: string }
        - in: query
          name: levelId
          schema: { type: string }
        - in: query
          name: status
          schema: { type: string }
      responses:
        '200':
          description: List of assessments
  /assessments/{id}:
    get:
      operationId: getAssessmentById
      summary: Get assessment by ID
      description: |
        Returns a single assessment by its ID.
        - Path parameter: `id` (string, required)
        - Response: Assessment object if found, 404 if not found.
        - Example: `/assessments/a1`
      tags: [Assessments]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Assessment details
        '404':
          description: Not found
  /attendances:
    get:
      operationId: listAttendances
      summary: Get all attendance records
      description: |
        Returns a list of all attendance records.
        - Optional query parameters:
          - `studentId` (string): Filter by student.
          - `swimClassSessionId` (string): Filter by swim class session.
          - `confirmed` (boolean): Filter by confirmation status.
        - Response: Array of attendance objects.
        - Example: `/attendances?studentId=s1&confirmed=true`
      tags: [Attendance]
      parameters:
        - in: query
          name: studentId
          schema: { type: string }
        - in: query
          name: swimClassSessionId
          schema: { type: string }
        - in: query
          name: confirmed
          schema: { type: boolean }
      responses:
        '200':
          description: List of attendance records
  /attendances/{id}:
    get:
      operationId: getAttendanceById
      summary: Get attendance by ID
      description: |
        Returns a single attendance record by its ID.
        - Path parameter: `id` (string, required)
        - Response: Attendance object if found, 404 if not found.
        - Example: `/attendances/at1`
      tags: [Attendance]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Attendance details
        '404':
          description: Not found
