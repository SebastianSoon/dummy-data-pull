{
  "openapi": "3.0.3",
  "info": {
    "title": "DSA Demo API",
    "version": "1.0.0",
    "description": "API for retrieving swim school data, including branches, users, students, levels, skills, classes, sessions, enrollments, assessments, and attendance."
  },
  "servers": [
    { "url": "https://dsa-demo.onrender.com" }
  ],
  "paths": {
    "/branches": {
      "get": {
        "operationId": "listBranches",
        "summary": "Get all branches",
        "description": "Returns a list of all branches.\n- No parameters required.\n- Response: Array of branch objects.\n- Example: [ { id: 'b1', name: 'Main Branch', ... }, ... ]",
        "tags": ["Branches"],
        "responses": {
          "200": { "description": "List of branches" }
        }
      }
    },
    "/branches/by-id": {
      "post": {
        "operationId": "getBranchById",
        "summary": "Get branch by ID (POST)",
        "description": "Returns a single branch by its ID. Pass the branchId in the request body. Example: { \"branchId\": \"b1\" }",
        "tags": ["Branches"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "branchId": { "type": "string" }
                },
                "required": ["branchId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Branch details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/users": {
      "get": {
        "operationId": "listUsers",
        "summary": "Get all users (staff)",
        "description": "Returns a list of all users (staff).\n- Optional query parameters:\n  - role (string): Filter by user role.\n  - branchId (string): Filter by branch.\n- Response: Array of user objects.\n- Example: GET /users?role=coach&branchId=b1",
        "tags": ["Users"],
        "parameters": [
          {
            "in": "query",
            "name": "role",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "branchId",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "List of users" }
        }
      }
    },
    "/users/by-id": {
      "post": {
        "operationId": "getUserById",
        "summary": "Get user by ID (POST)",
        "description": "Returns a single user by their ID. Pass the userId in the request body. Example: { \"userId\": \"u1\" }",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": { "type": "string" }
                },
                "required": ["userId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "User details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/students": {
      "get": {
        "operationId": "listStudents",
        "summary": "Get all students",
        "description": "Returns a list of all students.\n- Optional query parameters:\n  - levelId (string): Filter by level.\n  - branchId (string): Filter by branch.\n  - status (string): Filter by student status (TRIAL, NORMAL, ONHOLD, TERMINATED).\n- Response: Array of student objects.\n- Example: GET /students?levelId=l1&status=NORMAL",
        "tags": ["Students"],
        "parameters": [
          {
            "in": "query",
            "name": "levelId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "branchId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "List of students" }
        }
      }
    },
    "/students/by-id": {
      "post": {
        "operationId": "getStudentById",
        "summary": "Get student by ID (POST)",
        "description": "Returns a single student by their ID. Pass the studentId in the request body. Example: { \"studentId\": \"s1\" }",
        "tags": ["Students"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "studentId": { "type": "string" }
                },
                "required": ["studentId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Student details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/students/enrollments-by-student": {
      "post": {
        "operationId": "listStudentEnrollments",
        "summary": "Get all enrollments for a student (POST)",
        "description": "Returns all enrollments for a given student. Pass the studentId in the request body. Example: { \"studentId\": \"s1\" }",
        "tags": ["Students", "Enrollments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "studentId": { "type": "string" }
                },
                "required": ["studentId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "List of enrollments" }
        }
      }
    },
    "/students/assessments-by-student": {
      "post": {
        "operationId": "listStudentAssessments",
        "summary": "Get all assessments for a student (POST)",
        "description": "Returns all assessments for a given student. Pass the studentId in the request body. Example: { \"studentId\": \"s1\" }",
        "tags": ["Students", "Assessments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "studentId": { "type": "string" }
                },
                "required": ["studentId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "List of assessments" }
        }
      }
    },
    "/students/attendances-by-student": {
      "post": {
        "operationId": "listStudentAttendances",
        "summary": "Get all attendance records for a student (POST)",
        "description": "Returns all attendance records for a given student. Pass the studentId in the request body. Example: { \"studentId\": \"s1\" }",
        "tags": ["Students", "Attendance"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "studentId": { "type": "string" }
                },
                "required": ["studentId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "List of attendance records" }
        }
      }
    },
    "/levels": {
      "get": {
        "operationId": "listLevels",
        "summary": "Get all levels",
        "description": "Returns a list of all levels.\n- No parameters required.\n- Response: Array of level objects.\n- Example: [ { id: 'l1', name: 'Beginner', ... }, ... ]",
        "tags": ["Levels"],
        "responses": {
          "200": { "description": "List of levels" }
        }
      }
    },
    "/levels/by-id": {
      "post": {
        "operationId": "getLevelById",
        "summary": "Get level by ID (POST)",
        "description": "Returns a single level by its ID. Pass the levelId in the request body. Example: { \"levelId\": \"l1\" }",
        "tags": ["Levels"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "levelId": { "type": "string" }
                },
                "required": ["levelId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Level details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/levels/skills-by-level": {
      "post": {
        "operationId": "listLevelSkills",
        "summary": "Get all skills for a level (POST)",
        "description": "Returns all skills for a given level. Pass the levelId in the request body. Example: { \"levelId\": \"l1\" }",
        "tags": ["Levels", "Skills"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "levelId": { "type": "string" }
                },
                "required": ["levelId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "List of skills" }
        }
      }
    },
    "/skills": {
      "get": {
        "operationId": "listSkills",
        "summary": "Get all skills",
        "description": "Returns a list of all skills, optionally filtered by level.\n- Optional query parameter: levelId (string)\n- Response: Array of skill objects.\n- Example: GET /skills?levelId=l1",
        "tags": ["Skills"],
        "parameters": [
          {
            "in": "query",
            "name": "levelId",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "List of skills" }
        }
      }
    },
    "/class-types": {
      "get": {
        "operationId": "listClassTypes",
        "summary": "Get all class types",
        "description": "Returns a list of all class types.\n- No parameters required.\n- Response: Array of class type objects.\n- Example: [ { id: 'ct1', name: 'Group', ... }, ... ]",
        "tags": ["Class Types"],
        "responses": {
          "200": { "description": "List of class types" }
        }
      }
    },
    "/class-types/by-id": {
      "post": {
        "operationId": "getClassTypeById",
        "summary": "Get class type by ID (POST)",
        "description": "Returns a single class type by its ID. Pass the classTypeId in the request body. Example: { \"classTypeId\": \"ct1\" }",
        "tags": ["Class Types"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "classTypeId": { "type": "string" }
                },
                "required": ["classTypeId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Class type details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/swim-classes": {
      "get": {
        "operationId": "listSwimClasses",
        "summary": "Get all swim classes",
        "description": "Returns a list of all swim classes.\n- Optional query parameters:\n  - branchId (string): Filter by branch.\n  - classTypeId (string): Filter by class type.\n  - levelId (string): Filter by level (matches allowedLevels in class type).\n- Response: Array of swim class objects.\n- Example: GET /swim-classes?branchId=b1&levelId=l1",
        "tags": ["Swim Classes"],
        "parameters": [
          {
            "in": "query",
            "name": "branchId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "classTypeId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "levelId",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "List of swim classes" }
        }
      }
    },
    "/swim-classes/by-id": {
      "post": {
        "operationId": "getSwimClassById",
        "summary": "Get swim class by ID (POST)",
        "description": "Returns a single swim class by its ID. Pass the swimClassId in the request body. Example: { \"swimClassId\": \"c1\" }",
        "tags": ["Swim Classes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "swimClassId": { "type": "string" }
                },
                "required": ["swimClassId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Swim class details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/swim-classes/sessions-by-class": {
      "post": {
        "operationId": "listSwimClassSessions",
        "summary": "Get all sessions for a swim class (POST)",
        "description": "Returns all sessions for a given swim class. Pass the swimClassId in the request body. Example: { \"swimClassId\": \"c1\" }",
        "tags": ["Swim Classes", "Sessions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "swimClassId": { "type": "string" }
                },
                "required": ["swimClassId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "List of sessions" }
        }
      }
    },
    "/swim-class-sessions": {
      "get": {
        "operationId": "listSwimClassSessionsAll",
        "summary": "Get all swim class sessions",
        "description": "Returns a list of all swim class sessions.\n- Optional query parameters:\n  - swimClassId (string): Filter by swim class.\n  - dateFrom (string, date): Filter sessions on or after this date.\n  - dateTo (string, date): Filter sessions on or before this date.\n- Response: Array of session objects, each with a studentIds array.\n- Example: GET /swim-class-sessions?swimClassId=c1&dateFrom=2024-01-01",
        "tags": ["Sessions"],
        "parameters": [
          {
            "in": "query",
            "name": "swimClassId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "dateFrom",
            "schema": { "type": "string", "format": "date" }
          },
          {
            "in": "query",
            "name": "dateTo",
            "schema": { "type": "string", "format": "date" }
          }
        ],
        "responses": {
          "200": { "description": "List of swim class sessions" }
        }
      }
    },
    "/swim-class-sessions/by-id": {
      "post": {
        "operationId": "getSwimClassSessionById",
        "summary": "Get swim class session by ID (POST)",
        "description": "Returns a single swim class session by its ID. Pass the swimClassSessionId in the request body. Example: { \"swimClassSessionId\": \"s1\" }",
        "tags": ["Sessions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "swimClassSessionId": { "type": "string" }
                },
                "required": ["swimClassSessionId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Swim class session details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/swim-class-sessions/attendances-by-session": {
      "post": {
        "operationId": "listSessionAttendances",
        "summary": "Get all attendance records for a session (POST)",
        "description": "Returns all attendance records for a given swim class session. Pass the swimClassSessionId in the request body. Example: { \"swimClassSessionId\": \"s1\" }",
        "tags": ["Sessions", "Attendance"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "swimClassSessionId": { "type": "string" }
                },
                "required": ["swimClassSessionId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "List of attendance records" }
        }
      }
    },
    "/enrollments": {
      "get": {
        "operationId": "listEnrollments",
        "summary": "Get all enrollments",
        "description": "Returns a list of all enrollments.\n- Optional query parameters:\n  - studentId (string): Filter by student.\n  - classId (string): Filter by swim class.\n  - active (boolean): Filter for active enrollments (no endAt and not deleted).\n- Response: Array of enrollment objects.\n- Example: GET /enrollments?studentId=s1&active=true",
        "tags": ["Enrollments"],
        "parameters": [
          {
            "in": "query",
            "name": "studentId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "classId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "active",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "List of enrollments" }
        }
      }
    },
    "/enrollments/by-id": {
      "post": {
        "operationId": "getEnrollmentById",
        "summary": "Get enrollment by ID (POST)",
        "description": "Returns a single enrollment by its ID. Pass the enrollmentId in the request body. Example: { \"enrollmentId\": \"e1\" }",
        "tags": ["Enrollments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enrollmentId": { "type": "string" }
                },
                "required": ["enrollmentId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Enrollment details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/assessments": {
      "get": {
        "operationId": "listAssessments",
        "summary": "Get all assessments",
        "description": "Returns a list of all assessments.\n- Optional query parameters:\n  - studentId (string): Filter by student.\n  - levelId (string): Filter by level.\n  - status (string): Filter by assessment status (Scheduled, Submitted, Passed, Failed).\n- Response: Array of assessment objects.\n- Example: GET /assessments?studentId=s1&status=Passed",
        "tags": ["Assessments"],
        "parameters": [
          {
            "in": "query",
            "name": "studentId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "levelId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "status",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "List of assessments" }
        }
      }
    },
    "/assessments/by-id": {
      "post": {
        "operationId": "getAssessmentById",
        "summary": "Get assessment by ID (POST)",
        "description": "Returns a single assessment by its ID. Pass the assessmentId in the request body. Example: { \"assessmentId\": \"a1\" }",
        "tags": ["Assessments"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assessmentId": { "type": "string" }
                },
                "required": ["assessmentId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Assessment details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/attendances": {
      "get": {
        "operationId": "listAttendances",
        "summary": "Get all attendance records",
        "description": "Returns a list of all attendance records.\n- Optional query parameters:\n  - studentId (string): Filter by student.\n  - swimClassSessionId (string): Filter by swim class session.\n  - confirmed (boolean): Filter by confirmation status.\n- Response: Array of attendance objects.\n- Example: GET /attendances?studentId=s1&confirmed=true",
        "tags": ["Attendance"],
        "parameters": [
          {
            "in": "query",
            "name": "studentId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "swimClassSessionId",
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "confirmed",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "List of attendance records" }
        }
      }
    },
    "/attendances/by-id": {
      "post": {
        "operationId": "getAttendanceById",
        "summary": "Get attendance by ID (POST)",
        "description": "Returns a single attendance record by its ID. Pass the attendanceId in the request body. Example: { \"attendanceId\": \"at1\" }",
        "tags": ["Attendance"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attendanceId": { "type": "string" }
                },
                "required": ["attendanceId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Attendance details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/student-skill-progress": {
      "get": {
        "operationId": "listStudentSkillProgress",
        "summary": "Get all student skill progress records",
        "description": "Returns a list of all student skill progress records. Optional query parameters: studentId, skillId.",
        "tags": ["Student Skill Progress"],
        "parameters": [
          { "in": "query", "name": "studentId", "schema": { "type": "string" } },
          { "in": "query", "name": "skillId", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "List of student skill progress records" }
        }
      }
    },
    "/student-skill-progress/by-id": {
      "post": {
        "operationId": "getStudentSkillProgressById",
        "summary": "Get student skill progress by ID (POST)",
        "description": "Returns a single student skill progress record by its ID. Pass the id in the request body. Example: { \"id\": \"sp1\" }",
        "tags": ["Student Skill Progress"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": { "type": "string" }
                },
                "required": ["id"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Student skill progress details" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/students/skill-progress-by-student": {
      "post": {
        "operationId": "listSkillProgressByStudent",
        "summary": "Get all skill progress for a student (POST)",
        "description": "Returns all skill progress records for a given student. Pass the studentId in the request body. Example: { \"studentId\": \"st1\" }",
        "tags": ["Students", "Student Skill Progress"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "studentId": { "type": "string" }
                },
                "required": ["studentId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "List of skill progress records" }
        }
      }
    },
    "/skills/student-progress": {
      "post": {
        "operationId": "listStudentsBySkillProgress",
        "summary": "Get all students who achieved a skill (POST)",
        "description": "Returns all student skill progress records for a given skill. Pass the skillId in the request body. Example: { \"skillId\": \"s1\" }",
        "tags": ["Skills", "Student Skill Progress"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "skillId": { "type": "string" }
                },
                "required": ["skillId"]
              }
            }
          }
        },
        "responses": {
          "200": { "description": "List of student skill progress records" }
        }
      }
    },
    "/package-types": {
      "get": {
        "operationId": "listPackageTypes",
        "summary": "Get all package types",
        "description": "Returns a list of all package types.",
        "tags": ["Package Types"],
        "responses": { "200": { "description": "List of package types" } }
      }
    },
    "/package-types/by-id": {
      "post": {
        "operationId": "getPackageTypeById",
        "summary": "Get package type by ID (POST)",
        "description": "Returns a single package type by its ID. Pass the packageTypeId in the request body.",
        "tags": ["Package Types"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "packageTypeId": { "type": "string" } },
                "required": ["packageTypeId"]
              }
            }
          }
        },
        "responses": { "200": { "description": "Package type details" }, "404": { "description": "Not found" } }
      }
    },
    "/packages": {
      "get": {
        "operationId": "listPackages",
        "summary": "Get all packages",
        "description": "Returns a list of all packages. Optional query parameters: studentId, packageTypeId, isActive.",
        "tags": ["Packages"],
        "parameters": [
          { "in": "query", "name": "studentId", "schema": { "type": "string" } },
          { "in": "query", "name": "packageTypeId", "schema": { "type": "string" } },
          { "in": "query", "name": "isActive", "schema": { "type": "boolean" } }
        ],
        "responses": { "200": { "description": "List of packages" } }
      }
    },
    "/packages/by-id": {
      "post": {
        "operationId": "getPackageById",
        "summary": "Get package by ID (POST)",
        "description": "Returns a single package by its ID. Pass the packageId in the request body.",
        "tags": ["Packages"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "packageId": { "type": "string" } },
                "required": ["packageId"]
              }
            }
          }
        },
        "responses": { "200": { "description": "Package details" }, "404": { "description": "Not found" } }
      }
    },
    "/students/packages-by-student": {
      "post": {
        "operationId": "listPackagesByStudent",
        "summary": "Get all packages for a student (POST)",
        "description": "Returns all packages for a given student. Pass the studentId in the request body.",
        "tags": ["Students", "Packages"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "studentId": { "type": "string" } },
                "required": ["studentId"]
              }
            }
          }
        },
        "responses": { "200": { "description": "List of packages" } }
      }
    },
    "/coach-levels": {
      "get": {
        "operationId": "listCoachLevels",
        "summary": "Get all coach levels",
        "description": "Returns a list of all coach levels.",
        "tags": ["Coach Levels"],
        "responses": { "200": { "description": "List of coach levels" } }
      }
    },
    "/coach-levels/by-id": {
      "post": {
        "operationId": "getCoachLevelById",
        "summary": "Get coach level by ID (POST)",
        "description": "Returns a single coach level by its ID. Pass the coachLevelId in the request body.",
        "tags": ["Coach Levels"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "coachLevelId": { "type": "string" } },
                "required": ["coachLevelId"]
              }
            }
          }
        },
        "responses": { "200": { "description": "Coach level details" }, "404": { "description": "Not found" } }
      }
    },
    "/certs": {
      "get": {
        "operationId": "listCerts",
        "summary": "Get all certs",
        "description": "Returns a list of all certs.",
        "tags": ["Certs"],
        "responses": { "200": { "description": "List of certs" } }
      }
    },
    "/certs/by-id": {
      "post": {
        "operationId": "getCertById",
        "summary": "Get cert by ID (POST)",
        "description": "Returns a single cert by its ID. Pass the certId in the request body.",
        "tags": ["Certs"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "certId": { "type": "string" } },
                "required": ["certId"]
              }
            }
          }
        },
        "responses": { "200": { "description": "Cert details" }, "404": { "description": "Not found" } }
      }
    },
    "/user-certs": {
      "get": {
        "operationId": "listUserCerts",
        "summary": "Get all user certs",
        "description": "Returns a list of all user certs. Optional query parameters: userId, certId.",
        "tags": ["User Certs"],
        "parameters": [
          { "in": "query", "name": "userId", "schema": { "type": "string" } },
          { "in": "query", "name": "certId", "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "List of user certs" } }
      }
    },
    "/user-certs/by-id": {
      "post": {
        "operationId": "getUserCertById",
        "summary": "Get user cert by ID (POST)",
        "description": "Returns a single user cert by its ID. Pass the userCertId in the request body.",
        "tags": ["User Certs"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "userCertId": { "type": "string" } },
                "required": ["userCertId"]
              }
            }
          }
        },
        "responses": { "200": { "description": "User cert details" }, "404": { "description": "Not found" } }
      }
    },
    "/evaluations": {
      "get": {
        "operationId": "listEvaluations",
        "summary": "Get all evaluations",
        "description": "Returns a list of all evaluations. Optional query parameters: coachId, assessorId, swimClassSessionId.",
        "tags": ["Evaluations"],
        "parameters": [
          { "in": "query", "name": "coachId", "schema": { "type": "string" } },
          { "in": "query", "name": "assessorId", "schema": { "type": "string" } },
          { "in": "query", "name": "swimClassSessionId", "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "List of evaluations" } }
      }
    },
    "/evaluations/by-id": {
      "post": {
        "operationId": "getEvaluationById",
        "summary": "Get evaluation by ID (POST)",
        "description": "Returns a single evaluation by its ID. Pass the evaluationId in the request body.",
        "tags": ["Evaluations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": { "evaluationId": { "type": "string" } },
                "required": ["evaluationId"]
              }
            }
          }
        },
        "responses": { "200": { "description": "Evaluation details" }, "404": { "description": "Not found" } }
      }
    }
  }
}
